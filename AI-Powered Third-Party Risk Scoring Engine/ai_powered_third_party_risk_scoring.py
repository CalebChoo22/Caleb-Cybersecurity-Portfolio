# -*- coding: utf-8 -*-
"""AI-Powered Third-Party Risk Scoring.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bq8ETr0SvCgdyWhtNmeST6dgGwHs8_q4
"""

import pandas as pd

!pip install streamlit

# Load the vendor data
vendor_data_Sheet1 = pd.read_csv('vendor_data - Sheet1.csv')
vendor_data_Sheet1

# Convert 'Yes'/'No' to 1/0
vendor_data_Sheet1['Data Breach History'] = vendor_data_Sheet1['Data Breach History'].map({'Yes': 1, 'No': 0})

# Convert Industry Sensitivity to numbers
sensitivity_mapping = {'Low': 1, 'Medium': 2, 'High': 3}
vendor_data_Sheet1['Industry Sensitivity Level'] = vendor_data_Sheet1['Industry Sensitivity Level'].map(sensitivity_mapping)

vendor_data_Sheet1

from sklearn.ensemble import RandomForestClassifier

# Create a 'Risk' label manually for now (0=Low Risk, 1=High Risk)
vendor_data_Sheet1['Risk'] = [1, 0, 0]  # Example labels, adjust as needed

# Split into features (X) and target (y)
X = vendor_data_Sheet1[['Data Breach History', 'Security Rating', 'Number of Open Vulnerabilities', 'Industry Sensitivity Level']]
y = vendor_data_Sheet1['Risk']

# Train a simple model
model = RandomForestClassifier()
model.fit(X, y)

print("Model trained successfully!")

# New vendor example
new_vendor = pd.DataFrame({
    'Data Breach History': [0],
    'Security Rating': [70],
    'Number of Open Vulnerabilities': [5],
    'Industry Sensitivity Level': [2]
})

# Predict risk
risk_prediction = model.predict(new_vendor)
print("Predicted Risk:", "High" if risk_prediction[0]==1 else "Low")

import streamlit as st

st.title("Vendor Risk Scoring App")

uploaded_file = st.file_uploader("Upload your vendor CSV", type="csv")
if uploaded_file is not None:
    data = pd.read_csv(uploaded_file)

    # Preprocessing
    data['Data Breach History'] = data['Data Breach History'].map({'Yes': 1, 'No': 0})
    sensitivity_mapping = {'Low': 1, 'Medium': 2, 'High': 3}
    data['Industry Sensitivity Level'] = data['Industry Sensitivity Level'].map(sensitivity_mapping)

    # Predict
    predictions = model.predict(data[['Data Breach History', 'Security Rating', 'Number of Open Vulnerabilities', 'Industry Sensitivity Level']])
    data['Predicted Risk'] = ['High' if p==1 else 'Low' for p in predictions]

    st.write(data)